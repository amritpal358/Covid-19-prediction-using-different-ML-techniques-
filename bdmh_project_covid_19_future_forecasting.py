# -*- coding: utf-8 -*-
"""BDMH Project : Covid-19 Future Forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a0clVw_f9CtjbEfUuJ19WiDtcxWs4Gc-

# **COVID-19 Future Forecasting Using Supervised Machine Learning Models**

### **Importing Libraries**
"""

from google.colab import files
from google.colab import drive
import pandas as pd
import numpy as np
import folium
import matplotlib.pyplot as plt
import seaborn as sns
from tabulate import tabulate
from seaborn import lineplot
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.linear_model import Lasso
from statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt
import math
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from prettytable import PrettyTable

"""### **Uploading Dataset**"""

drive.mount('/content/drive')

#Choose 3 csv data files and upload. 
#Files : time_series_covid19_confirmed_global.csv, time_series_covid19_deaths_global.csv, time_series_covid19_recovered_global.csv
uploaded = files.upload()
#print(uploaded)

"""### **A. Loading Data**

##### 1. Confirmed Cases Data
"""

dataFrameConfirmed = pd.read_csv('time_series_covid19_confirmed_global.csv') 
#dataFrameConfirmed = pd.read_csv('/content/drive/MyDrive/BDMH_Project/Dataset/31.03.2020/time_series_covid19_confirmed_global.csv')
print(dataFrameConfirmed.shape)

#dataFrameConfirmed1 = pd.read_csv('/content/drive/MyDrive/BDMH_Project/Dataset/Complete/time_series_covid19_confirmed_global_modified.csv')
#print(dataFrameConfirmed1.shape)
#dataFrameConfirmed1.head()
dataFrameConfirmed.head(2)

"""##### 2. Death Cases Data"""

dataFrameDeaths = pd.read_csv('time_series_covid19_deaths_global.csv') 
print(dataFrameDeaths.shape)
dataFrameDeaths.head(2)

#dataFrameDeaths1 = pd.read_csv('/content/drive/MyDrive/BDMH_Project/Dataset/Complete/time_series_covid19_deaths_global_modified.csv')
#print(dataFrameDeaths1.shape)
#dataFrameDeaths1.head(2)

"""##### 3. Recovered Cases Data"""

dataFrameRecovered = pd.read_csv('time_series_covid19_recovered_global.csv') 
print(dataFrameRecovered.shape)
dataFrameRecovered.head(2)

#dataFrameRecovered1 = pd.read_csv('/content/drive/MyDrive/BDMH_Project/Dataset/Complete/time_series_covid19_recovered_global_modified.csv')
#print(dataFrameRecovered1.shape)
#dataFrameRecovered1.head(2)

"""### **B. Data Preprocessing**

#### **Detecting Missing Values**
"""

#1. Confirmed Cases Data
print("---------------------Confirmed Cases Data---------------------")
print(dataFrameConfirmed.isna().sum())
print("Total Missing Values In Confirmed Cases Dataset : ", dataFrameConfirmed.isna().sum().sum())
#This means there are 189 missing values for Province/State and 1 missing value each for Lat & Long

#2. Death Cases Data
print("---------------------Death Cases Data---------------------")
print(dataFrameDeaths.isna().sum())
print("Total Missing Values In Death Cases Dataset : ", dataFrameDeaths.isna().sum().sum())
#This means there are 189 missing values for Province/State and 1 missing value each for Lat & Long

#3. Recovered Cases Data
print("---------------------Recovered Cases Data---------------------")
print(dataFrameRecovered.isna().sum())
print("Total Missing Values In Recovered Cases Dataset : ", dataFrameRecovered.isna().sum().sum())
#This means there are 190 missing values for Province/State.

"""#### **Handling Missing Values**

#####    For State/Province
"""

#So, to handle empty values for Province/State we combined it with Country/Region
def combineStateAndCountry(stateList, countryList):
  placeList = []
  for state, country in zip(stateList, countryList):
    if type(state) == float and np.isnan(state):
      place = country
    else:
      place = state + ", " + country
    placeList.append(place)
    
  return placeList
  
#1. Confirmed Cases Data
confirmedStateList = dataFrameConfirmed['Province/State'].tolist()
confirmedCountryList = dataFrameConfirmed['Country/Region'].tolist()
placeList = combineStateAndCountry(confirmedStateList, confirmedCountryList)
dataFrameConfirmed['Province/State'] = placeList

#2. Death Cases Data
deathsStateList = dataFrameDeaths['Province/State'].tolist()
deathsCountryList = dataFrameDeaths['Country/Region'].tolist()
placeList = combineStateAndCountry(deathsStateList, deathsCountryList)
dataFrameDeaths['Province/State'] = placeList

#3. Recovered Cases Data
recoveredStateList = dataFrameRecovered['Province/State'].tolist()
recoveredCountryList = dataFrameRecovered['Country/Region'].tolist()
placeList = combineStateAndCountry(recoveredStateList, recoveredCountryList)
dataFrameRecovered['Province/State'] = placeList

dataFrameConfirmed.sample(5) #Print 5 rows randomly

"""##### b) For Lat & Long"""

#We found that dataFrameConfirmed and dataFrameDeaths has missing Lat and Long values
#Let us identify that rows
confirmedNullValues = dataFrameConfirmed.isnull()
rowsConfirmedNullValues = confirmedNullValues.any(axis=1)
print(dataFrameConfirmed[rowsConfirmedNullValues].iloc[:,[0,1,2,3]])
print("\n")

#We found that Repatriated Travellers, Canada has NaN values for Lat and Long

#As Repatriated Travellers is not a place name, so we will set Lat and Long to 0 value
dataFrameConfirmed = dataFrameConfirmed.fillna(0)

#Similarly we fill 0 in case of deaths data frame
dataFrameDeaths = dataFrameDeaths.fillna(0)

#Now, we don't have any null values
print("Number of Null Values in Confirmed Cases Data : ", dataFrameConfirmed.isnull().sum().sum())
print("Number of Null Values in Death Cases Data : ", dataFrameDeaths.isnull().sum().sum())
print("Number of Null Values in Recovered Cases Data : ", dataFrameRecovered.isnull().sum().sum())

"""### **C. Data Visualization**

#### **Map Showing Affected Locations**
"""

latitudeList = dataFrameConfirmed['Lat'].tolist()
longitudeList = dataFrameConfirmed['Long'].tolist()

locationList = []
for lat, long in zip(latitudeList, longitudeList):
  if lat != 0 and long != 0:
    locationList.append([lat, long])

figure = folium.Figure(width = 850, height = 420)

#Creating Map
map = folium.Map(location = [26.834, 26.382], tiles = 'Stamen Toner', zoom_start = 2, control_scale = True, zoom_control = False, max_zoom = 2, min_zoom = 2)

#Adding Markers on Map
for location in locationList:
  folium.Marker(location).add_to(map)

#folium.Marker(location, icon=folium.Icon(color='red', icon_color='#FFFF00')).add_to(map)
#map.save("map.html")

figure.add_child(map)
figure

"""#### **Top 10 Countries With Highest Number of Confirmed Cases (on 31st March 20)**"""

countryCasesDict = {}

dataFrameConfirmedTotal = pd.DataFrame()
dataFrameConfirmedTotal['Country'] = dataFrameConfirmed['Country/Region']
dataFrameConfirmedTotal['TotalCases'] = dataFrameConfirmed['3/31/20'] #Todo - Download updated data and do here 3/31/21

for i in range(len(dataFrameConfirmedTotal)):
  country = dataFrameConfirmedTotal.iloc[i, 0]
  totalCases = dataFrameConfirmedTotal.iloc[i, 1]

  if country not in countryCasesDict:
    countryCasesDict[country] = totalCases

  else:
    countryCasesDict[country] = countryCasesDict[country]  + totalCases
  
#Sort Dictionry In Descending Order By Value
countryCasesDict = sorted(countryCasesDict.items(), key=lambda x: x[1], reverse=True)
#print(countryCasesDict)

#Creating List to plot data
countriesListForXAxis = []
casesListForYAxis = []

for i in range(0, 10):
  conAndCase = countryCasesDict[i]
  countriesListForXAxis.append(conAndCase[0])
  casesListForYAxis.append(conAndCase[1])

indexOfUnitedKingdom = countriesListForXAxis.index('United Kingdom')
countriesListForXAxis[indexOfUnitedKingdom] = 'UK'

#Plot
fig = plt.figure(figsize = (10,6))
plt.title("Top 10 Countries With Highest Number of Confirmed Cases (on 31st March 20)", size = 15, color = 'blue', pad = 15)
#sns.set_theme(style="whitegrid")
sns.barplot(x = countriesListForXAxis, y = casesListForYAxis, palette = sns.color_palette("husl", 10))
plt.xlabel('Countries')
plt.ylabel('No of Cases')
plt.show()
print(countriesListForXAxis)
print(casesListForYAxis)

"""#### **Top 5 Countries With Highest Number of Death Cases (on 31st March 20)**

"""

countryDeathsDict = {}

dataFrameDeathsTotal = pd.DataFrame()
dataFrameDeathsTotal['Country'] = dataFrameDeaths['Country/Region']
dataFrameDeathsTotal['TotalDeaths'] = dataFrameDeaths['3/31/20'] 

for i in range(len(dataFrameDeathsTotal)):
  country = dataFrameDeathsTotal.iloc[i, 0]
  totalDeaths = dataFrameDeathsTotal.iloc[i, 1]

  if country not in countryDeathsDict:
    countryDeathsDict[country] = totalDeaths

  else:
    countryDeathsDict[country] = countryDeathsDict[country]  + totalDeaths
  
#Sort Dictionry In Descending Order By Value
countryDeathsDict = sorted(countryDeathsDict.items(), key=lambda x: x[1], reverse=True)
#print(countryDeathsDict)

#Creating List to plot data
countriesListForXAxis = []
deathsListForYAxis = []

for i in range(0, 5):
  conAndDeath = countryDeathsDict[i]
  countriesListForXAxis.append(conAndDeath[0])
  deathsListForYAxis.append(conAndDeath[1])

# indexOfUnitedKingdom = countriesListForXAxis.index('United Kingdom')
# countriesListForXAxis[indexOfUnitedKingdom] = 'UK'

#Plot
fig = plt.figure(figsize = (8,5))
plt.title("Top 5 Countries With Highest Number of Death Cases (on 31st March 20)", size = 15, color = 'blue', pad = 15)
#sns.set_theme(style="whitegrid")
sns.barplot(x = countriesListForXAxis, y = deathsListForYAxis, palette = sns.color_palette("husl", 10))
plt.xlabel('Countries')
plt.ylabel('No of Deaths')
plt.savefig('Top 5 Countries With Highest Number of Death Cases (on 31st March 20)')
plt.show()
print(countriesListForXAxis)
print(deathsListForYAxis)

"""#### **Top 10 Countries With Highest Number of Recovered Cases (on 31st March 20)**

"""

countryRecoveredDict = {}

dataFrameRecoveredTotal = pd.DataFrame()
dataFrameRecoveredTotal['Country'] = dataFrameRecovered['Country/Region']
dataFrameRecoveredTotal['TotalRecovered'] = dataFrameRecovered['3/31/20'] 

for i in range(len(dataFrameRecoveredTotal)):
  country = dataFrameRecoveredTotal.iloc[i, 0]
  totalRecovered = dataFrameRecoveredTotal.iloc[i, 1]

  if country not in countryRecoveredDict:
    countryRecoveredDict[country] = totalRecovered

  else:
    countryRecoveredDict[country] = countryRecoveredDict[country]  + totalRecovered
  
#Sort Dictionry In Descending Order By Value
countryRecoveredDict = sorted(countryRecoveredDict.items(), key=lambda x: x[1], reverse=True)
#print(countryRecoveredDict)

#Creating List to plot data
countriesListForXAxis = []
recoveredListForYAxis = []

for i in range(0, 10):
  conAndRecover = countryRecoveredDict[i]
  countriesListForXAxis.append(conAndRecover[0])
  recoveredListForYAxis.append(conAndRecover[1])

# indexOfUnitedKingdom = countriesListForXAxis.index('United Kingdom')
# countriesListForXAxis[indexOfUnitedKingdom] = 'UK'

#Plot
fig = plt.figure(figsize = (10,6))
plt.title("Top 10 Countries With Highest Number of Recovered Cases (on 31st March 20)", size = 15, color = 'blue', pad = 15)
#sns.set_theme(style="whitegrid")
sns.barplot(x = countriesListForXAxis, y = recoveredListForYAxis, palette = sns.color_palette("husl", 10))
plt.xlabel('Countries')
plt.ylabel('No of Recovered Cases')
plt.savefig('Top 10 Countries With Highest Number of Recovered Cases (on 31st March 20)')
plt.show()
print(countriesListForXAxis)
print(recoveredListForYAxis)

data = dataFrameConfirmed1
data1 = dataFrameDeaths1
data2 = dataFrameRecovered1
#data = dataFrameConfirmed.drop(columns = ['Lat','Long'], axis =1, inplace = True)
#data = dataFrameConfirmed1.drop(columns = ['Lat','Long'], axis =1)
data.dropna(axis=0,inplace=True)
data1.dropna(axis=0,inplace=True)
data2.dropna(axis=0,inplace=True)
#cols=data.columns

data2.head(2)

"""**Converting the dates into pd datetime objects**"""

data['Country/Region']=pd.to_datetime(data['Country/Region'])
data1['Country/Region']=pd.to_datetime(data1['Country/Region'])
data2['Country/Region']=pd.to_datetime(data2['Country/Region'])

"""**Visualizing Confirmed ,Death and Recovered Stats of different Countries:**

**Confirmed Stats Visualization**
"""

fig = go.Figure()
# Adding traces for each slider step
for i in data.columns.values[1:]:
  fig.add_trace(go.Scatter(
            visible=True,
            line=dict(width=3),
            name="Confirmed cases in "+ i,
            x=data['Country/Region'],
            y=data[i].values,marker=dict(color=[j for j in range(len(data.columns.values[1:]))])))
    
iters = []
for i in range(len(fig.data)):
  cnt = dict(method="update",
        args=[{"visible": [False] * len(fig.data)},{"title": "Slider switched to country: " + data.columns.values[1:][i]}],)
  cnt["args"][0]["visible"][i] = True 
  iters.append(cnt)
sliders = [dict(active=60,currentvalue={"prefix": "Frequency: "},steps=iters)]

fig.update_layout(title_text="Move the Slider to Choose a Country",sliders=sliders)
fig.show()

"""**Death Stats Visualization**"""

fig1 = go.Figure()
for i in data1.columns.values[1:]:
  fig1.add_trace(go.Scatter(
            visible=True,
            line=dict(width=3),
            name="Death cases in "+ i,
            x=data1['Country/Region'],
            y=data1[i].values,marker=dict(color=[j for j in range(len(data1.columns.values[1:]))])))
    
iters = []
for i in range(len(fig1.data)):
  cnt = dict(method="update",
        args=[{"visible": [False] * len(fig1.data)},{"title": "Slider switched to country: " + data1.columns.values[1:][i]}],)
  cnt["args"][0]["visible"][i] = True 
  iters.append(cnt)
sliders = [dict(active=70,currentvalue={"prefix": "Frequency: "},steps=iters)]

fig1.update_layout(title_text="Move the Slider to Choose a Country",sliders=sliders)
fig1.show()

"""**Recovered Stats Visualization**"""

fig2 = go.Figure()
for i in data2.columns.values[1:]:
  fig2.add_trace(go.Scatter(
            visible=True,
            line=dict(width=3),
            name="Recovered cases in "+ i,
            x=data2['Country/Region'],
            y=data2[i].values,marker=dict(color=[j for j in range(len(data2.columns.values[1:]))])))
    
iters = []
for i in range(len(fig2.data)):
  cnt = dict(method="update",
        args=[{"visible": [False] * len(fig2.data)},{"title": "Slider switched to country: " + data2.columns.values[1:][i]}],)
  cnt["args"][0]["visible"][i] = True 
  iters.append(cnt)
sliders = [dict(active=70,currentvalue={"prefix": "Frequency: "},steps=iters)]

fig2.update_layout(title_text="Move the Slider to Choose a Country",sliders=sliders)
fig2.show()

"""**Finding Death to Confirmed cases ratio**"""

def dtc_ratio(data,data1):
    array1=data.iloc[:,1:].values
    array2=data1.iloc[:,1:].values
    arr=[]
    for i in range(len(array1)):
        li=[]
        for j in range(len(array1[i])):
            array1[i][j]=float(array1[i][j])
            array2[i][j]=float(array2[i][j])
            if array1[i][j]==0 or array2[i][j]==0:
                li.append(0)
            else:
                li.append(array2[i][j]/array1[i][j])
        arr.append(li)
    return arr                
array=dtc_ratio(data,data1)

data3=pd.DataFrame(columns=data.columns)
data3['Country/Region']=data['Country/Region']
array=np.asarray(array)    
for i in range(len(data.columns[1:])):
    data3[data.columns[1:][i]]=array[:,i]
data3.head(2)

"""**Visualizing Death to Confirmed Cases Ratio**"""

# Create figure
fig3 = go.Figure()

# Add traces, one for each slider step
for i in data.columns.values[1:]:
    fig3.add_trace(
        go.Scatter(
            visible=True,
            line=dict(width=3),
            name="Confirmed cases in " + i,
            x=data3['Country/Region'],
            y=data3[i].values,
            marker=dict(color=[j for j in range(len(data.columns.values[1:]))])))
    
iters = []
for i in range(len(fig3.data)):
    cnt = dict(method="update",args=[{"visible": [False] * len(fig3.data)},
              {"title": "Slider switched to country: " + data.columns.values[1:][i]}],)
    cnt["args"][0]["visible"][i] = True  
    iters.append(cnt)
sliders = [dict(active=100,currentvalue={"prefix": "Frequency: "},steps=iters)]

fig3.update_layout(title_text="Change The Slider To Change To Different Countries",sliders=sliders)

fig3.show()

### Country with highest death to confirmed cases ratio

data3.mean().sort_values(ascending=False).iloc[:10]

"""### **D. Data Preparation**

#### **Maintain Global Statistics**
"""

def globalStatisticsForm(dataFrame, colHeading):
  #Drop State, Country, Lat & Long columns
  dataFrame = dataFrame.drop(['Province/State', 'Country/Region', 'Lat', 'Long'], axis = 1)
  #As used in the research paper, we will only be dealing with data for 66 days.
  #From : 22 Jan 2020
  #To : 29 March 2020
  dataFrame = dataFrame.iloc[:, :67]
  #print(dataFrame)
  #Iterate dataframe column wise and get cases for each day
  #subtract current column values from its previous columns
  intermediateDataFrame = pd.DataFrame()

  for i in range(0, dataFrame.shape[1] - 1):
    columnName = "Day " + str(i+1) + " " + colHeading 
    if i == 0:
      intermediateDataFrame[columnName] = dataFrame.iloc[:, i]
    else:
      intermediateDataFrame[columnName] = dataFrame.iloc[:, i] # - dataFrame.iloc[:, i-1]

  resultantDataFrame = intermediateDataFrame.sum(axis = 0)
  #print(intermediateDataFrame)
  casesList = resultantDataFrame.tolist()
  daysList = []
  for day in range(1, len(casesList)+1):
    daysList.append(day)

  finalDataFrame = pd.DataFrame()
  finalDataFrame['Days'] = daysList
  finalDataFrame[colHeading] = casesList

  #print(finalDataFrame)
  printDataInTabularForm(finalDataFrame, finalDataFrame.columns)

  return finalDataFrame

def printDataInTabularForm(df, heading):
  print(tabulate(df.head(10), headers = heading, tablefmt = 'psql', showindex = False))

#1. Confirmed Cases Data
dataFrameConfirmedFinal = globalStatisticsForm(dataFrameConfirmed, "New Cases")
#printDataInTabularForm(dataFrameConfirmedFinal, "Day Wise Total New Confirmed Cases")

#2. Death Cases Data
dataFrameDeathsFinal = globalStatisticsForm(dataFrameDeaths, "Deaths")
# printDataInTabularForm(dataFrameDeathsFinal, "Day Wise Total Death Cases")

#3. Recovered Cases Data
dataFrameRecoveredFinal = globalStatisticsForm(dataFrameRecovered, "Recoveries")
# printDataInTabularForm(dataFrameRecoveredFinal, "Day Wise Total Recoveries")

"""#### **Dividing Data Into Train & Test**"""

def trainTestSplit(dataFrame, numberOfDaysForTraining, numberOfDaysForTesting):
  X_train = dataFrame['Days'].head(numberOfDaysForTraining)
  Y_train = dataFrame.iloc[0:numberOfDaysForTraining, 1]

  X_test = dataFrame['Days'].iloc[numberOfDaysForTraining-1 : numberOfDaysForTraining + numberOfDaysForTesting-1]
  Y_test = dataFrame.iloc[numberOfDaysForTraining-1 : numberOfDaysForTraining + numberOfDaysForTesting-1, 1]

  #Reshaping
  X_train = X_train.to_numpy().reshape(-1, 1)
  X_test = X_test.to_numpy().reshape(-1, 1)
  Y_train = Y_train.to_numpy().reshape(-1, 1)

  return X_train, Y_train, X_test, Y_test

"""### **E. Machine Learning Models**

#### **Linear Regression**
"""

#@title
def LinearRegressionMethod(X_train, Y_train, X_test):
  linearRegressionModel = LinearRegression(fit_intercept = True, normalize = True)
  linearRegressionModel.fit(X_train, Y_train)

  #Prediction
  Y_predict = linearRegressionModel.predict(X_test)
  #print(Y_predict)
  return Y_predict

#pd.set_option('display.max_rows', None)
#sns.lmplot(x = 'Days', y = 'New Cases', data = dataFrameConfirmedFinal.head(26), order = 2, ci = None)

# plt.scatter(X_testConfirmed, Y_testConfirmed, color ='b')
# plt.plot(X_testConfirmed, Y_predictConfirmed, color ='k')
# plt.show()

"""#### **Support Vector Machines (SVM)**"""

#@title
def SVMMethod(X_train, Y_train, X_test):
  svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.1)
  svmModel.fit(X_train, Y_train.ravel())
  Y_predict = svmModel.predict(X_test)
  #print(Y_predict)
  return Y_predict

"""#### **Lasso Regression**"""

#@title
def LassoMethod(X_train, Y_train, X_test):
  lassoModel = Lasso(alpha=1.0)
  lassoModel.fit(X_train, Y_train)

  Y_predict = lassoModel.predict(X_test)
  #print(Y_predict)
  return Y_predict

"""#### **Exponential Smoothing (TODO)**"""

#@title
#def ExponentialSmoothingMethod(X_train, Y_train, X_test):
#  pass
def ExponentialSmoothingMethod(ac):
   fit1 = SimpleExpSmoothing(ac).fit(smoothing_level=0.2,optimized=False)
   gat=fit1.predict(len(ac),len(ac))
   #fcast1 = fit1.forecast(3).rename(r'$\alpha=0.2$')
   plt.plot(ac)
   plt.plot(fit1.fittedvalues)
   plt.legend(['Cases','ES predictiction'])
   plt.title("ES")
   plt.xlabel("starting dates")
   plt.ylabel("Number of cases from starting dates")
   return fit1.fittedvalues
#data = [446.6565,  454.4733,  455.663 ,  423.6322,  456.2713,  440.5881, 425.3325,  485.1494,  506.0482,  526.792 ,  514.2689,  494.211 ]
# #index= pd.date_range(start='1996', end='2008', freq='A')
# dayio=[]

# oildata = pd.Series(arr_date, dpq)
# #print(len(index))
#fit1 = SimpleExpSmoothing(data).fit(smoothing_level=0.2,optimized=False)
#gat=fit1.predict(len(data),len(data))
# fcast1 = fit1.forecast(3).rename(r'$\alpha=0.2$')
#print(fit1.fittedvalues)
#plt.figure(figsize=(12, 8))
#plt.plot(gat, marker='o', color='black')
#plt.plot(fit1.fittedvalues, marker='o', color='blue')

"""### **F. Model Evaluation**

#### **R-Squared Score**
"""

#@title
def RSquaredScore(Y_actual, Y_predicted):
  rSquaredScore = r2_score(Y_actual, Y_predicted)
  return rSquaredScore

"""#### **Adjusted R-Squared Score**"""

#@title
def AdjustedRSquaredScore(Y_actual, Y_predicted, X_test):
  rSquaredScore = RSquaredScore(Y_actual, Y_predicted)
  n = len(X_test)
  p = 1
  adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
  return adjustedRSquaredScore

"""#### **Mean Absolute Error (MAE)**"""

#@title
def MeanAbsoluteError(Y_actual, Y_predicted):
  meanAbsoluteError = mean_absolute_error(Y_actual, Y_predicted)
  return meanAbsoluteError

"""#### **Mean Square Error (MSE)**"""

#@title
def MeanSquareError(Y_actual, Y_predicted):
  meanSquareError = mean_squared_error(Y_actual, Y_predicted)
  return meanSquareError

"""#### **Root Mean Square Error (RMSE)**"""

#@title
def RootMeanSquareError(Y_actual, Y_predicted):
  rootMeanSquareError = mean_squared_error(Y_actual, Y_predicted, squared = False)
  return rootMeanSquareError

"""**SVM Graph Making function**"""

#For svm graph
def graphforfutureprediction(dataFrameConfirmedFinal,ij):
  afg=np.array([jio for jio in range(len(dataFrameConfirmedFinal))]).reshape(-1,1)
  print(len(afg))
  future_da=np.array([doa for doa in range(len(dataFrameConfirmedFinal)+10)]).reshape(-1,1)
  X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, ij, 10)
  svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.1)
  svmModel.fit(X_trainConfirmed, Y_trainConfirmed.ravel())
  Y_predict = svmModel.predict(X_testConfirmed)
  yf_predict=svmModel.predict(future_da)
  Y_futu=svmModel.predict(X_testConfirmed)
  plt.plot(afg,dataFrameConfirmedFinal)
  plt.plot(future_da,yf_predict,linestyle='dashed')
  plt.legend(['','Cases','SVM predicted'])
  plt.title("SVM prediction for next 10 days")
  plt.xlabel("number of Dates")
  plt.ylabel("Total cases")
  plt.show()
  return yf_predict

"""**LR Graph Making function**"""

#For LR graph
def graphforfutureprediction1(dataFrameConfirmedFinal,ij):
  afg=np.array([jio for jio in range(len(dataFrameConfirmedFinal))]).reshape(-1,1)
  print(len(afg))
  future_da=np.array([doa for doa in range(len(dataFrameConfirmedFinal)+10)]).reshape(-1,1)
  X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, ij, 10)
  linearRegressionModel = LinearRegression(fit_intercept = True, normalize = True)
  linearRegressionModel.fit(X_trainConfirmed, Y_trainConfirmed)
  Y_predict = linearRegressionModel.predict(X_testConfirmed)
  yf_predict=linearRegressionModel.predict(future_da)
  plt.plot(afg,dataFrameConfirmedFinal)
  plt.plot(future_da,yf_predict,linestyle='dashed')
  plt.legend(['','Cases','LR predicted'])
  plt.title("LR prediction  foe next 10days")
  plt.xlabel("number of Dates")
  plt.ylabel("Total cases")
  plt.show()
  return yf_predict

"""**Lasso graph function**"""

#For LASSO graph
def graphforfutureprediction2(dataFrameConfirmedFinal,ij):
  afg=np.array([jio for jio in range(len(dataFrameConfirmedFinal))]).reshape(-1,1)
  print(len(afg))
  future_da=np.array([doa for doa in range(len(dataFrameConfirmedFinal)+10)]).reshape(-1,1)
  X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, ij, 10)
  lassoModel = Lasso(alpha=1.0)
  lassoModel.fit(X_trainConfirmed, Y_trainConfirmed)
  Y_predict = lassoModel.predict(X_testConfirmed)
  yf_predict=lassoModel.predict(future_da)
  plt.plot(afg,dataFrameConfirmedFinal)
  plt.plot(future_da,yf_predict,linestyle='dashed')
  plt.legend(['','Cases','LASSO predicted'])
  plt.title("LASSO prediction for next 10 days")
  plt.xlabel("number of Dates")
  plt.ylabel("Total cases")
  plt.show()
  return yf_predict

plt.plot(sorted(dataFrameRecoveredFinal['Recoveries']),sorted(dataFrameDeathsFinal['Deaths']))
#plt.plot(mean_value)
plt.legend(['Recovery vs deaths'])
plt.xlabel("Recovered Cases")
plt.ylabel("Death cases")
plt.title('Number of Death Vs Recovered Cases')

"""**Mortality Rate FIG 14**"""

arr=dataFrameConfirmedFinal['New Cases']
arr1=dataFrameDeathsFinal['Deaths']
mortality_arr=[]# array of deathssum/confirmedsum 
datesarry=[]#dates array
mean_value=0
for i in range(len(dataFrameConfirmedFinal)):
  mortality_arr.append(arr1[i]/arr[i])
  datesarry.append(i)
  mean_value+=arr1[i]/arr[i]
mean_value=mean_value/len(dataFrameConfirmedFinal)
print(mean_value)
plt.plot(datesarry,mortality_arr)
plt.axhline(y=mean_value,linestyle='--', color='black')
plt.legend(['Mortality','Mean'])
plt.xlabel("Number of days")
plt.ylabel("Moratality rate")
plt.title("Mortality Rate")

"""**Recovery Rate Fig 15**"""

confirmed = dataFrameConfirmedFinal['New Cases']
reco=dataFrameRecoveredFinal['Recoveries']
art=[]
art1=[]
mean_value1=0
for i in range(len(dataFrameConfirmedFinal)):
  art.append(reco[i]/confirmed[i])
  art1.append(i)
  mean_value1+=reco[i]/confirmed[i]
mean_value1=mean_value1/len(dataFrameConfirmedFinal)
#recoveryarr=[]# array of reciveredsum/confirmedsum cases 
# mean for above array
#datesarry1=[]#dates array
plt.plot(art1,art)
plt.axhline(y=mean_value,linestyle='--', color='black')
plt.legend(['Recovery rate','Mean'])
plt.xlabel("Number of days")
plt.ylabel("Recovery rate")
plt.title("Recovery Rate")

"""Fig 16"""

afg1=np.array([jio for jio in range(len(dataFrameConfirmedFinal))]).reshape(-1,1)
print(len(afg1))
plt.plot(afg1,dataFrameConfirmedFinal)
plt.plot(afg1,dataFrameDeathsFinal)
plt.plot(afg1,dataFrameRecoveredFinal)
plt.title("Recovery,Deaths,Confirmed cases graph")
plt.legend(['Confirmed','Deaths','Recovered'])
plt.xlabel("Number of days")
plt.ylabel("Number Cases")
plt.show()

"""### **G. Different Architectures**

#### **Architecture 1 : Training - 22 Jan 2020 to 16 Feb 2020 (26 Days), Prediction - 16 Feb 2020 to 26 Feb 2020 (10 Days)**

#####1. Confirmed Cases Data - Architecture 1
"""

#@title
X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 290, 10)

#Linear Regression
Y_predictConfirmedLR = LinearRegressionMethod(X_trainConfirmed, Y_trainConfirmed, X_testConfirmed)
helo1=Y_predictConfirmedLR
print(len(Y_testConfirmed),len(Y_predictConfirmedLR))
rSquaredScoreLR = RSquaredScore(Y_testConfirmed, Y_predictConfirmedLR)
adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
meanAbsoluteErrorLR = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedLR)
meanSquareErrorLR = MeanSquareError(Y_testConfirmed, Y_predictConfirmedLR)
rootMeanSquareErrorLR = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedLR)
helo1=graphforfutureprediction(dataFrameConfirmedFinal,290)
#SVM
Y_predictConfirmedSVM = SVMMethod(X_trainConfirmed, Y_trainConfirmed, X_testConfirmed)
rSquaredScoreSVM = RSquaredScore(Y_testConfirmed, Y_predictConfirmedSVM)
adjustedRSquaredScoreSVM = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedSVM, X_testConfirmed)
meanAbsoluteErrorSVM = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedSVM)
meanSquareErrorSVM = MeanSquareError(Y_testConfirmed, Y_predictConfirmedSVM)
rootMeanSquareErrorSVM = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedSVM)
val2=graphforfutureprediction1(dataFrameConfirmedFinal,290)

#Lasso Regression
Y_predictConfirmedLasso = LassoMethod(X_trainConfirmed, Y_trainConfirmed, X_testConfirmed)
rSquaredScoreLasso = RSquaredScore(Y_testConfirmed, Y_predictConfirmedLasso)
adjustedRSquaredScoreLasso = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLasso, X_testConfirmed)
meanAbsoluteErrorLasso = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedLasso)
meanSquareErrorLasso = MeanSquareError(Y_testConfirmed, Y_predictConfirmedLasso)
rootMeanSquareErrorLasso = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedLasso)
val3=graphforfutureprediction2(dataFrameConfirmedFinal,290)

#Exponential Smoothing - TODO

aft=dataFrameConfirmedFinal['New Cases'].tolist()
print(aft)
af=[]
for i in range(10):
  af.append(aft[i])
Y_predictConfirmedES = ExponentialSmoothingMethod(af)
rSquaredScoreES = RSquaredScore(Y_testConfirmed, Y_predictConfirmedES)
adjustedRSquaredScoreES = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedES, X_testConfirmed)
meanAbsoluteErrorES = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedES)
meanSquareErrorES = MeanSquareError(Y_testConfirmed, Y_predictConfirmedES)
rootMeanSquareErrorES = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedES)
#rSquaredScoreES = 'Todo'
#adjustedRSquaredScoreES = 'Todo'
#meanAbsoluteErrorES = 'Todo'
#meanSquareErrorES = 'Todo'
#rootMeanSquareErrorES = 'Todo'
afg1=np.array([jio for jio in range(len(Y_predictConfirmedLR))]).reshape(-1,1)
print(len(afg1))

evaluationMethods = ['Model', 'R Square', 'R Square Adjusted', 'MSE', 'MAE', 'RMSE']
models = ['LR', 'Lasso', 'SVM', 'ES']
table = PrettyTable()
table.field_names = evaluationMethods
table.title = "Model Performance on New Confirmed Cases Using Architecture 1"
table.add_row([models[0], rSquaredScoreLR, adjustedRSquaredScoreLR, meanSquareErrorLR, meanAbsoluteErrorLR, rootMeanSquareErrorLR])
table.add_row([models[1], rSquaredScoreLasso, adjustedRSquaredScoreLasso, meanSquareErrorLasso, meanAbsoluteErrorLasso, rootMeanSquareErrorLasso])
table.add_row([models[2], rSquaredScoreSVM, adjustedRSquaredScoreSVM, meanSquareErrorSVM, meanAbsoluteErrorSVM, rootMeanSquareErrorSVM])
table.add_row([models[3], rSquaredScoreES, adjustedRSquaredScoreES, meanSquareErrorES, meanAbsoluteErrorES, rootMeanSquareErrorES])
print(table)

"""##### 2. Death Cases Data - Architecture 1"""

#@title
X_trainDeaths, Y_trainDeaths, X_testDeaths, Y_testDeaths = trainTestSplit(dataFrameDeathsFinal, 26, 10)

#Linear Regression
Y_predictDeathsLR = LinearRegressionMethod(X_trainDeaths, Y_trainDeaths, X_testDeaths)
helo2=Y_predictDeathsLR
rSquaredScoreLR = RSquaredScore(Y_testDeaths, Y_predictDeathsLR)
adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testDeaths, Y_predictDeathsLR, X_testDeaths)
meanAbsoluteErrorLR = MeanAbsoluteError(Y_testDeaths, Y_predictDeathsLR)
meanSquareErrorLR = MeanSquareError(Y_testDeaths, Y_predictDeathsLR)
rootMeanSquareErrorLR = RootMeanSquareError(Y_testDeaths, Y_predictDeathsLR)
helo2=graphforfutureprediction(dataFrameDeathsFinal,26)
#SVM
Y_predictDeathsSVM = SVMMethod(X_trainDeaths, Y_trainDeaths, X_testDeaths)
rSquaredScoreSVM = RSquaredScore(Y_testDeaths, Y_predictDeathsSVM)
adjustedRSquaredScoreSVM = AdjustedRSquaredScore(Y_testDeaths, Y_predictDeathsSVM, X_testDeaths)
meanAbsoluteErrorSVM = MeanAbsoluteError(Y_testDeaths, Y_predictDeathsSVM)
meanSquareErrorSVM = MeanSquareError(Y_testDeaths, Y_predictDeathsSVM)
rootMeanSquareErrorSVM = RootMeanSquareError(Y_testDeaths, Y_predictDeathsSVM)
val0=graphforfutureprediction1(dataFrameDeathsFinal,26)
#Lasso Regression
Y_predictDeathsLasso = LassoMethod(X_trainDeaths, Y_trainDeaths, X_testDeaths)
rSquaredScoreLasso = RSquaredScore(Y_testDeaths, Y_predictDeathsLasso)
adjustedRSquaredScoreLasso = AdjustedRSquaredScore(Y_testDeaths, Y_predictDeathsLasso, X_testDeaths)
meanAbsoluteErrorLasso = MeanAbsoluteError(Y_testDeaths, Y_predictDeathsLasso)
meanSquareErrorLasso = MeanSquareError(Y_testDeaths, Y_predictDeathsLasso)
rootMeanSquareErrorLasso = RootMeanSquareError(Y_testDeaths, Y_predictDeathsLasso)
val9=graphforfutureprediction2(dataFrameDeathsFinal,26)
#Exponential Smoothing - TODO
aft=dataFrameDeathsFinal['Deaths'].tolist()
print(aft)
af=[]
for i in range(10):
  af.append(aft[i])
Y_predictConfirmedES = ExponentialSmoothingMethod(af)
rSquaredScoreES = RSquaredScore(Y_testConfirmed, Y_predictConfirmedES)
adjustedRSquaredScoreES = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedES, X_testConfirmed)
meanAbsoluteErrorES = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedES)
meanSquareErrorES = MeanSquareError(Y_testConfirmed, Y_predictConfirmedES)
rootMeanSquareErrorES = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedES)


evaluationMethods = ['Model', 'R Square', 'R Square Adjusted', 'MSE', 'MAE', 'RMSE']
models = ['LR', 'Lasso', 'SVM', 'ES']
table = PrettyTable()
table.field_names = evaluationMethods
table.title = "Model Performance on Death Cases Using Architecture 1"
table.add_row([models[0], rSquaredScoreLR, adjustedRSquaredScoreLR, meanSquareErrorLR, meanAbsoluteErrorLR, rootMeanSquareErrorLR])
table.add_row([models[1], rSquaredScoreLasso, adjustedRSquaredScoreLasso, meanSquareErrorLasso, meanAbsoluteErrorLasso, rootMeanSquareErrorLasso])
table.add_row([models[2], rSquaredScoreSVM, adjustedRSquaredScoreSVM, meanSquareErrorSVM, meanAbsoluteErrorSVM, rootMeanSquareErrorSVM])
table.add_row([models[3], rSquaredScoreES, adjustedRSquaredScoreES, meanSquareErrorES, meanAbsoluteErrorES, rootMeanSquareErrorES])
print(table)

"""##### 3. Recovered Cases Data - Architecture 1"""

#@title
X_trainRecovered, Y_trainRecovered, X_testRecovered, Y_testRecovered = trainTestSplit(dataFrameRecoveredFinal, 26, 10)

#Linear Regression
Y_predictRecoveredLR = LinearRegressionMethod(X_trainRecovered, Y_trainRecovered, X_testRecovered)
helo3=Y_predictRecoveredLR
rSquaredScoreLR = RSquaredScore(Y_testRecovered, Y_predictRecoveredLR)
adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testRecovered, Y_predictRecoveredLR, X_testRecovered)
meanAbsoluteErrorLR = MeanAbsoluteError(Y_testRecovered, Y_predictRecoveredLR)
meanSquareErrorLR = MeanSquareError(Y_testRecovered, Y_predictRecoveredLR)
rootMeanSquareErrorLR = RootMeanSquareError(Y_testRecovered, Y_predictRecoveredLR)
helo3=graphforfutureprediction(dataFrameRecoveredFinal,26)

#SVM
Y_predictRecoveredSVM = SVMMethod(X_trainRecovered, Y_trainRecovered, X_testRecovered)
rSquaredScoreSVM = RSquaredScore(Y_testRecovered, Y_predictRecoveredSVM)
adjustedRSquaredScoreSVM = AdjustedRSquaredScore(Y_testRecovered, Y_predictRecoveredSVM, X_testRecovered)
meanAbsoluteErrorSVM = MeanAbsoluteError(Y_testRecovered, Y_predictRecoveredSVM)
meanSquareErrorSVM = MeanSquareError(Y_testRecovered, Y_predictRecoveredSVM)
rootMeanSquareErrorSVM = RootMeanSquareError(Y_testRecovered, Y_predictRecoveredSVM)
val8=graphforfutureprediction1(dataFrameRecoveredFinal,26)
#Lasso Regression
Y_predictRecoveredLasso = LassoMethod(X_trainRecovered, Y_trainRecovered, X_testRecovered)
rSquaredScoreLasso = RSquaredScore(Y_testRecovered, Y_predictRecoveredLasso)
adjustedRSquaredScoreLasso = AdjustedRSquaredScore(Y_testRecovered, Y_predictRecoveredLasso, X_testRecovered)
meanAbsoluteErrorLasso = MeanAbsoluteError(Y_testRecovered, Y_predictRecoveredLasso)
meanSquareErrorLasso = MeanSquareError(Y_testRecovered, Y_predictRecoveredLasso)
rootMeanSquareErrorLasso = RootMeanSquareError(Y_testRecovered, Y_predictRecoveredLasso)
val7=graphforfutureprediction2(dataFrameRecoveredFinal,26)

#Exponential Smoothing - TODO
aft=dataFrameRecoveredFinal['Recoveries'].tolist()
print(aft)
af=[]
for i in range(10):
  af.append(aft[i])
Y_predictConfirmedES = ExponentialSmoothingMethod(af)
rSquaredScoreES = RSquaredScore(Y_testConfirmed, Y_predictConfirmedES)
adjustedRSquaredScoreES = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedES, X_testConfirmed)
meanAbsoluteErrorES = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedES)
meanSquareErrorES = MeanSquareError(Y_testConfirmed, Y_predictConfirmedES)
rootMeanSquareErrorES = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedES)
evaluationMethods = ['Model', 'R Square', 'R Square Adjusted', 'MSE', 'MAE', 'RMSE']
models = ['LR', 'Lasso', 'SVM', 'ES']
table = PrettyTable()
table.field_names = evaluationMethods
table.title = "Model Performance on Recovered Cases Using Architecture 1"
table.add_row([models[0], rSquaredScoreLR, adjustedRSquaredScoreLR, meanSquareErrorLR, meanAbsoluteErrorLR, rootMeanSquareErrorLR])
table.add_row([models[1], rSquaredScoreLasso, adjustedRSquaredScoreLasso, meanSquareErrorLasso, meanAbsoluteErrorLasso, rootMeanSquareErrorLasso])
table.add_row([models[2], rSquaredScoreSVM, adjustedRSquaredScoreSVM, meanSquareErrorSVM, meanAbsoluteErrorSVM, rootMeanSquareErrorSVM])
table.add_row([models[3], rSquaredScoreES, adjustedRSquaredScoreES, meanSquareErrorES, meanAbsoluteErrorES, rootMeanSquareErrorES])
print(table)

"""FIG 19 In Research paper"""

afg1=np.array([jio for jio in range(len(helo1))]).reshape(-1,1)
print(len(afg1))
plt.plot(afg1,helo1)
plt.plot(afg1,helo2)
plt.plot(afg1,helo3)
plt.title("LR")
plt.xlabel("Number of days")
plt.ylabel("Number Cases")
plt.show()
afg1=np.array([jio for jio in range(len(helo1))]).reshape(-1,1)
print(len(afg1))
plt.plot(afg1,val0)
plt.plot(afg1,val8)
plt.plot(afg1,val2)
plt.title("SVM")
plt.xlabel("Number of days")
plt.ylabel("Number Cases")
plt.show()
afg1=np.array([jio for jio in range(len(helo1))]).reshape(-1,1)
print(len(afg1))
plt.plot(afg1,val3)
plt.plot(afg1,val9)
plt.plot(afg1,val7)
plt.title("LASSO")
plt.xlabel("Number of days")
plt.ylabel("Number Cases")
plt.show()

"""#### **Architecture 2 : Training - 22 Jan 2020 to 02 March 2020 (41 Days), Prediction - 02 March 2020 to 12 March 2020 (10 Days)**

#####1. Confirmed Cases Data - Architecture 2
"""

from sklearn.preprocessing import PolynomialFeatures
X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 41, 10)
lassoModel = Lasso(alpha=1.0)
lassoModel.fit(X_trainConfirmed, Y_trainConfirmed)
Y_predict = lassoModel.predict(X_testConfirmed)
poly = PolynomialFeatures(degree=4)

poly_X_test_confirmed = poly.fit_transform(X_testConfirmed)

print('LASSO  R2 Score   : ',RSquaredScore(Y_testConfirmed, lassoModel.predict(X_testConfirmed)))#RSquaredScore(Y_testConfirmed, lassoModel.predict(X_testConfirmed)))
rSquaredScore = RSquaredScore(Y_testConfirmed, lassoModel.predict(X_testConfirmed))
n = len(X_trainConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted squared",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("mean squared value",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testConfirmed, lassoModel.predict(X_testConfirmed))
print("Mean absolute error",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, lassoModel.predict(X_testConfirmed), squared = False)
print("Root mean square error",rootMeanSquareError)

aft=dataFrameConfirmedFinal['New Cases'].tolist()
print(aft)
af=[]
for i in range(10):
  af.append(aft[i])
fit2 = SimpleExpSmoothing(af).fit(smoothing_level=0.8,optimized=True)
#fit2 = SimpleExpSmoothing(af).fit()
fit2.predict(len(af),len(af))
fcast2 = fit2.forecast(10)#.rename(r'$\alpha=0.6$')
#fcast1 = fit1.forecast(10).rename(r'$\alpha={}$'.format(smoothing_level))
print(len(fcast2),len(Y_trainConfirmed))
rSquaredScoreES121 = RSquaredScore(Y_trainConfirmed, fit2.fittedvalues)
#fit2.fittedvalues
print("----------",rSquaredScoreES121)


from statsmodels.tsa.holtwinters import ExponentialSmoothing
model = ExponentialSmoothing(af)
model_fit = model.fit(smoothing_level=0.8,optimized=True)
bh=[]
for i in range(len(model_fit.fittedvalues)):
  bh.append(model_fit.predict(i)[0])
model_fit=model_fit.predict(len(af))
#model_fit=model_fit[0]
#print(len(bh),len(Y_testConfirmed),model_fit.fittedvalues)
print(model_fit)
rSquaredScoreES121 = RSquaredScore(Y_trainConfirmed,bh)#model_fit.fittedvalues)
print(rSquaredScoreES121)

X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameDeathsFinal, 41, 10)
 lassoModel = Lasso(alpha=1.0)
 lassoModel.fit(X_trainConfirmed, Y_trainConfirmed)
 Y_predict = lassoModel.predict(X_testConfirmed)
 print('LASSO  R2 Score   : ',RSquaredScore(Y_testConfirmed, lassoModel.predict(X_testConfirmed)))#RSquaredScore(Y_trainConfirmed, lassoModel.predict(X_trainConfirmed)))
 rSquaredScore = RSquaredScore(Y_testConfirmed, lassoModel.predict(X_testConfirmed))
 n = len(X_trainConfirmed)
 p = 1
 adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
 print("Adjusted squared",adjustedRSquaredScore)
 meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
 print("mean squared value",meanSquareError)
 meanAbsoluteError = mean_absolute_error(Y_testConfirmed, lassoModel.predict(X_testConfirmed))
 print("Mean absolute error",meanAbsoluteError)
 rootMeanSquareError = mean_squared_error(Y_testConfirmed, lassoModel.predict(X_testConfirmed), squared = False)
 print("Root mean square error",rootMeanSquareError)

X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameRecoveredFinal, 41, 10)
  lassoModel = Lasso(alpha=1.0)
  lassoModel.fit(X_trainConfirmed, Y_trainConfirmed)
  Y_predict = lassoModel.predict(X_testConfirmed)
  print('LASSO  R2 Score   : ',RSquaredScore(Y_trainConfirmed, lassoModel.predict(X_trainConfirmed)))
  rSquaredScore = RSquaredScore(Y_trainConfirmed, lassoModel.predict(X_trainConfirmed))
  n = len(X_trainConfirmed)
  p = 1
  adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
  print("Adjusted squared",adjustedRSquaredScore)
  meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
  print("mean squared value",meanSquareError)
  rSquaredScore = RSquaredScore(Y_testConfirmed, lassoModel.predict(X_testConfirmed))
  meanAbsoluteError = mean_absolute_error(Y_testConfirmed, lassoModel.predict(X_testConfirmed))
  print("Mean absolute error",meanAbsoluteError)
  rootMeanSquareError = mean_squared_error(Y_testConfirmed, lassoModel.predict(X_testConfirmed), squared = False)
  print("Root mean square error",rootMeanSquareError)

X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 41, 10)
ln_model = LinearRegression()
ln_model.fit(X_trainConfirmed, Y_trainConfirmed)
print('Linear Regression  R2 Score   : ',RSquaredScore(Y_trainConfirmed, ln_model.predict(X_trainConfirmed)))
rSquaredScore = RSquaredScore(Y_trainConfirmed, ln_model.predict(X_trainConfirmed))
n = len(X_trainConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted squared",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("mean squared value",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testConfirmed, ln_model.predict(X_testConfirmed))
print("Mean absolute error",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, ln_model.predict(X_testConfirmed), squared = False)
print("Root mean square error",rootMeanSquareError)

X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameRecoveredFinal, 41, 10)
ln_model = LinearRegression()
ln_model.fit(X_trainConfirmed, Y_trainConfirmed)
print('Linear Regession  R2 Score   : ',RSquaredScore(Y_trainConfirmed, ln_model.predict(X_trainConfirmed)))
rSquaredScore = RSquaredScore(Y_trainConfirmed, ln_model.predict(X_trainConfirmed))
n = len(X_trainConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted squared",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("mean squared value",meanSquareError)

meanAbsoluteError = mean_absolute_error(Y_testConfirmed, ln_model.predict(X_testConfirmed))
print("Mean absolute error",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, ln_model.predict(X_testConfirmed), squared = False)
print("Root mean square error",rootMeanSquareError)

X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameDeathsFinal, 41, 10)
ln_model = LinearRegression()
ln_model.fit(X_trainConfirmed, Y_trainConfirmed)
print('Linear Regession  R2 Score   : ',RSquaredScore(Y_trainConfirmed, ln_model.predict(X_trainConfirmed)))
rSquaredScore = RSquaredScore(Y_trainConfirmed, ln_model.predict(X_trainConfirmed))
n = len(X_trainConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted squared",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("mean squared value",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testConfirmed, ln_model.predict(X_testConfirmed))
print("Mean absolute error",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, ln_model.predict(X_testConfirmed), squared = False)
print("Root mean square error",rootMeanSquareError)

X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameDeathsFinal, 41, 10)
svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.002)
svmModel.fit(X_trainConfirmed, Y_trainConfirmed.ravel())
Y_predict = svmModel.predict(X_testConfirmed)
print('SVM  R2 Score   : ',RSquaredScore(Y_trainConfirmed, svmModel.predict(X_trainConfirmed)))
#adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
#def AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed):
rSquaredScore = RSquaredScore(Y_trainConfirmed, svmModel.predict(X_trainConfirmed))
n = len(X_testConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted squared:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("mean squared value:",meanSquareError)

meanAbsoluteError = mean_absolute_error(Y_testConfirmed, svmModel.predict(X_testConfirmed))
print("Mean absolute error:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, svmModel.predict(X_testConfirmed), squared = False)
print("Root mean square error:",rootMeanSquareError)

X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 41, 10)
svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.02)
svmModel.fit(X_trainConfirmed, Y_trainConfirmed.ravel())
#Y_predict = svmModel.predict(X_testConfirmed)
print('SVM  R2 Score   : ',RSquaredScore(Y_trainConfirmed, svmModel.predict(X_trainConfirmed)))
#adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
#def AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed):
rSquaredScore = RSquaredScore(Y_trainConfirmed, svmModel.predict(X_trainConfirmed))
n = len(X_testConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted squared",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("mean squared value",meanSquareError)

meanAbsoluteError = mean_absolute_error(Y_testConfirmed, svmModel.predict(X_testConfirmed))
print("Mean absolute error",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, svmModel.predict(X_testConfirmed), squared = False)
print("Root mean square error",rootMeanSquareError)

X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameRecoveredFinal, 41, 10)
svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.02)
svmModel.fit(X_trainConfirmed, Y_trainConfirmed.ravel())
#Y_predict = svmModel.predict(X_testConfirmed)
print('SVM  R2 Score   : ',RSquaredScore(Y_trainConfirmed, svmModel.predict(X_trainConfirmed)))
#adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
#def AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed):
rSquaredScore = RSquaredScore(Y_trainConfirmed, svmModel.predict(X_trainConfirmed))
n = len(X_testConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted squared",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, svmModel.predict(X_testConfirmed))
print("mean squared value",meanSquareError)

meanAbsoluteError = mean_absolute_error(Y_testConfirmed, svmModel.predict(X_testConfirmed))
print("Mean absolute error",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, svmModel.predict(X_testConfirmed), squared = False)
print("Root mean square error",rootMeanSquareError)

#@title
X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 41, 10)

#Linear Regression
Y_predictConfirmedLR = LinearRegressionMethod(X_trainConfirmed, Y_trainConfirmed, X_testConfirmed)

rSquaredScoreLR = RSquaredScore(Y_testConfirmed, Y_predictConfirmedLR)
adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
meanAbsoluteErrorLR = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedLR)
meanSquareErrorLR = MeanSquareError(Y_testConfirmed, Y_predictConfirmedLR)
rootMeanSquareErrorLR = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedLR)
graphforfutureprediction(dataFrameConfirmedFinal,41)
#SVM
Y_predictConfirmedSVM = SVMMethod(X_trainConfirmed, Y_trainConfirmed, X_testConfirmed)
rSquaredScoreSVM = RSquaredScore(Y_testConfirmed, Y_predictConfirmedSVM)
adjustedRSquaredScoreSVM = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedSVM, X_testConfirmed)
meanAbsoluteErrorSVM = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedSVM)
meanSquareErrorSVM = MeanSquareError(Y_testConfirmed, Y_predictConfirmedSVM)
rootMeanSquareErrorSVM = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedSVM)
graphforfutureprediction1(dataFrameConfirmedFinal,41)
#Lasso Regression
Y_predictConfirmedLasso = LassoMethod(X_trainConfirmed, Y_trainConfirmed, X_testConfirmed)
rSquaredScoreLasso = RSquaredScore(Y_testConfirmed, Y_predictConfirmedLasso)
adjustedRSquaredScoreLasso = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLasso, X_testConfirmed)
meanAbsoluteErrorLasso = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedLasso)
meanSquareErrorLasso = MeanSquareError(Y_testConfirmed, Y_predictConfirmedLasso)
rootMeanSquareErrorLasso = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedLasso)
graphforfutureprediction2(dataFrameConfirmedFinal,41)
#Exponential Smoothing - TODO
aft=dataFrameConfirmedFinal['New Cases'].tolist()
print(aft)
af=[]
for i in range(10):
  af.append(aft[i])
Y_predictConfirmedES = ExponentialSmoothingMethod(af)
rSquaredScoreES = RSquaredScore(Y_testConfirmed, Y_predictConfirmedES)
adjustedRSquaredScoreES = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedES, X_testConfirmed)
meanAbsoluteErrorES = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedES)
meanSquareErrorES = MeanSquareError(Y_testConfirmed, Y_predictConfirmedES)
rootMeanSquareErrorES = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedES)

evaluationMethods = ['Model', 'R Square', 'R Square Adjusted', 'MSE', 'MAE', 'RMSE']
models = ['LR', 'Lasso', 'SVM', 'ES']
table = PrettyTable()
table.field_names = evaluationMethods
table.title = "Model Performance on New Confirmed Cases Using Architecture 2"
table.add_row([models[0], rSquaredScoreLR, adjustedRSquaredScoreLR, meanSquareErrorLR, meanAbsoluteErrorLR, rootMeanSquareErrorLR])
table.add_row([models[1], rSquaredScoreLasso, adjustedRSquaredScoreLasso, meanSquareErrorLasso, meanAbsoluteErrorLasso, rootMeanSquareErrorLasso])
table.add_row([models[2], rSquaredScoreSVM, adjustedRSquaredScoreSVM, meanSquareErrorSVM, meanAbsoluteErrorSVM, rootMeanSquareErrorSVM])
table.add_row([models[3], rSquaredScoreES, adjustedRSquaredScoreES, meanSquareErrorES, meanAbsoluteErrorES, rootMeanSquareErrorES])
print(table)

"""##### 2. Death Cases Data - Architecture 2"""

#@title
X_trainDeaths, Y_trainDeaths, X_testDeaths, Y_testDeaths = trainTestSplit(dataFrameDeathsFinal, 41, 10)

#Linear Regression
Y_predictDeathsLR = LinearRegressionMethod(X_trainDeaths, Y_trainDeaths, X_testDeaths)

rSquaredScoreLR = RSquaredScore(Y_testDeaths, Y_predictDeathsLR)
adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testDeaths, Y_predictDeathsLR, X_testDeaths)
meanAbsoluteErrorLR = MeanAbsoluteError(Y_testDeaths, Y_predictDeathsLR)
meanSquareErrorLR = MeanSquareError(Y_testDeaths, Y_predictDeathsLR)
rootMeanSquareErrorLR = RootMeanSquareError(Y_testDeaths, Y_predictDeathsLR)
graphforfutureprediction(dataFrameDeathsFinal,41)

#SVM
Y_predictDeathsSVM = SVMMethod(X_trainDeaths, Y_trainDeaths, X_testDeaths)
rSquaredScoreSVM = RSquaredScore(Y_testDeaths, Y_predictDeathsSVM)
adjustedRSquaredScoreSVM = AdjustedRSquaredScore(Y_testDeaths, Y_predictDeathsSVM, X_testDeaths)
meanAbsoluteErrorSVM = MeanAbsoluteError(Y_testDeaths, Y_predictDeathsSVM)
meanSquareErrorSVM = MeanSquareError(Y_testDeaths, Y_predictDeathsSVM)
rootMeanSquareErrorSVM = RootMeanSquareError(Y_testDeaths, Y_predictDeathsSVM)
graphforfutureprediction1(dataFrameDeathsFinal,41)
#Lasso Regression
Y_predictDeathsLasso = LassoMethod(X_trainDeaths, Y_trainDeaths, X_testDeaths)
rSquaredScoreLasso = RSquaredScore(Y_testDeaths, Y_predictDeathsLasso)
adjustedRSquaredScoreLasso = AdjustedRSquaredScore(Y_testDeaths, Y_predictDeathsLasso, X_testDeaths)
meanAbsoluteErrorLasso = MeanAbsoluteError(Y_testDeaths, Y_predictDeathsLasso)
meanSquareErrorLasso = MeanSquareError(Y_testDeaths, Y_predictDeathsLasso)
rootMeanSquareErrorLasso = RootMeanSquareError(Y_testDeaths, Y_predictDeathsLasso)
graphforfutureprediction2(dataFrameDeathsFinal,41)

#Exponential Smoothing 
aft=dataFrameDeathsFinal['Deaths'].tolist()
print(aft)
af=[]
for i in range(10):
  af.append(aft[i])
Y_predictConfirmedES = ExponentialSmoothingMethod(af)
rSquaredScoreES = RSquaredScore(Y_testConfirmed, Y_predictConfirmedES)
adjustedRSquaredScoreES = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedES, X_testConfirmed)
meanAbsoluteErrorES = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedES)
meanSquareErrorES = MeanSquareError(Y_testConfirmed, Y_predictConfirmedES)
rootMeanSquareErrorES = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedES)

evaluationMethods = ['Model', 'R Square', 'R Square Adjusted', 'MSE', 'MAE', 'RMSE']
models = ['LR', 'Lasso', 'SVM', 'ES']
table = PrettyTable()
table.field_names = evaluationMethods
table.title = "Model Performance on Death Cases Using Architecture 2"
table.add_row([models[0], rSquaredScoreLR, adjustedRSquaredScoreLR, meanSquareErrorLR, meanAbsoluteErrorLR, rootMeanSquareErrorLR])
table.add_row([models[1], rSquaredScoreLasso, adjustedRSquaredScoreLasso, meanSquareErrorLasso, meanAbsoluteErrorLasso, rootMeanSquareErrorLasso])
table.add_row([models[2], rSquaredScoreSVM, adjustedRSquaredScoreSVM, meanSquareErrorSVM, meanAbsoluteErrorSVM, rootMeanSquareErrorSVM])
table.add_row([models[3], rSquaredScoreES, adjustedRSquaredScoreES, meanSquareErrorES, meanAbsoluteErrorES, rootMeanSquareErrorES])
print(table)

"""##### 3. Recovered Cases Data - Architecture 2"""

#@title
X_trainRecovered, Y_trainRecovered, X_testRecovered, Y_testRecovered = trainTestSplit(dataFrameRecoveredFinal, 41, 10)

#Linear Regression
Y_predictRecoveredLR = LinearRegressionMethod(X_trainRecovered, Y_trainRecovered, X_testRecovered)

rSquaredScoreLR = RSquaredScore(Y_testRecovered, Y_predictRecoveredLR)
adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testRecovered, Y_predictRecoveredLR, X_testRecovered)
meanAbsoluteErrorLR = MeanAbsoluteError(Y_testRecovered, Y_predictRecoveredLR)
meanSquareErrorLR = MeanSquareError(Y_testRecovered, Y_predictRecoveredLR)
rootMeanSquareErrorLR = RootMeanSquareError(Y_testRecovered, Y_predictRecoveredLR)
graphforfutureprediction(dataFrameRecoveredFinal,41)

#SVM
Y_predictRecoveredSVM = SVMMethod(X_trainRecovered, Y_trainRecovered, X_testRecovered)
rSquaredScoreSVM = RSquaredScore(Y_testRecovered, Y_predictRecoveredSVM)
adjustedRSquaredScoreSVM = AdjustedRSquaredScore(Y_testRecovered, Y_predictRecoveredSVM, X_testRecovered)
meanAbsoluteErrorSVM = MeanAbsoluteError(Y_testRecovered, Y_predictRecoveredSVM)
meanSquareErrorSVM = MeanSquareError(Y_testRecovered, Y_predictRecoveredSVM)
rootMeanSquareErrorSVM = RootMeanSquareError(Y_testRecovered, Y_predictRecoveredSVM)
graphforfutureprediction1(dataFrameRecoveredFinal,41)

#Lasso Regression
Y_predictRecoveredLasso = LassoMethod(X_trainRecovered, Y_trainRecovered, X_testRecovered)
rSquaredScoreLasso = RSquaredScore(Y_testRecovered, Y_predictRecoveredLasso)
adjustedRSquaredScoreLasso = AdjustedRSquaredScore(Y_testRecovered, Y_predictRecoveredLasso, X_testRecovered)
meanAbsoluteErrorLasso = MeanAbsoluteError(Y_testRecovered, Y_predictRecoveredLasso)
meanSquareErrorLasso = MeanSquareError(Y_testRecovered, Y_predictRecoveredLasso)
rootMeanSquareErrorLasso = RootMeanSquareError(Y_testRecovered, Y_predictRecoveredLasso)
graphforfutureprediction2(dataFrameRecoveredFinal,41)

#Exponential Smoothing - TODO
aft=dataFrameRecoveredFinal['Recoveries'].tolist()
print(aft)
af=[]
for i in range(10):
  af.append(aft[i])
Y_predictConfirmedES = ExponentialSmoothingMethod(af)
rSquaredScoreES = RSquaredScore(Y_testConfirmed, Y_predictConfirmedES)
adjustedRSquaredScoreES = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedES, X_testConfirmed)
meanAbsoluteErrorES = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedES)
meanSquareErrorES = MeanSquareError(Y_testConfirmed, Y_predictConfirmedES)
rootMeanSquareErrorES = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedES)

evaluationMethods = ['Model', 'R Square', 'R Square Adjusted', 'MSE', 'MAE', 'RMSE']
models = ['LR', 'Lasso', 'SVM', 'ES']
table = PrettyTable()
table.field_names = evaluationMethods
table.title = "Model Performance on Recovered Cases Using Architecture 2"
table.add_row([models[0], rSquaredScoreLR, adjustedRSquaredScoreLR, meanSquareErrorLR, meanAbsoluteErrorLR, rootMeanSquareErrorLR])
table.add_row([models[1], rSquaredScoreLasso, adjustedRSquaredScoreLasso, meanSquareErrorLasso, meanAbsoluteErrorLasso, rootMeanSquareErrorLasso])
table.add_row([models[2], rSquaredScoreSVM, adjustedRSquaredScoreSVM, meanSquareErrorSVM, meanAbsoluteErrorSVM, rootMeanSquareErrorSVM])
table.add_row([models[3], rSquaredScoreES, adjustedRSquaredScoreES, meanSquareErrorES, meanAbsoluteErrorES, rootMeanSquareErrorES])
print(table)

"""#### **Architecture 3 : Training - 22 Jan 2020 to 17 March 2020 (56 Days), Prediction - 17 March 2020 to 27 March 2020 (10 Days)**

#####1. Confirmed Cases Data - Architecture 3
"""

#@title
X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 56, 10)

#Linear Regression
Y_predictConfirmedLR = LinearRegressionMethod(X_trainConfirmed, Y_trainConfirmed, X_testConfirmed)

rSquaredScoreLR = RSquaredScore(Y_testConfirmed, Y_predictConfirmedLR)
adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
meanAbsoluteErrorLR = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedLR)
meanSquareErrorLR = MeanSquareError(Y_testConfirmed, Y_predictConfirmedLR)
rootMeanSquareErrorLR = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedLR)
graphforfutureprediction(dataFrameConfirmedFinal,56)
#SVM
Y_predictConfirmedSVM = SVMMethod(X_trainConfirmed, Y_trainConfirmed, X_testConfirmed)
rSquaredScoreSVM = RSquaredScore(Y_testConfirmed, Y_predictConfirmedSVM)
adjustedRSquaredScoreSVM = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedSVM, X_testConfirmed)
meanAbsoluteErrorSVM = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedSVM)
meanSquareErrorSVM = MeanSquareError(Y_testConfirmed, Y_predictConfirmedSVM)
rootMeanSquareErrorSVM = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedSVM)
graphforfutureprediction1(dataFrameConfirmedFinal,56)
#Lasso Regression
Y_predictConfirmedLasso = LassoMethod(X_trainConfirmed, Y_trainConfirmed, X_testConfirmed)
rSquaredScoreLasso = RSquaredScore(Y_testConfirmed, Y_predictConfirmedLasso)
adjustedRSquaredScoreLasso = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLasso, X_testConfirmed)
meanAbsoluteErrorLasso = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedLasso)
meanSquareErrorLasso = MeanSquareError(Y_testConfirmed, Y_predictConfirmedLasso)
rootMeanSquareErrorLasso = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedLasso)
graphforfutureprediction2(dataFrameConfirmedFinal,56)
#Exponential Smoothing - TODO
aft=dataFrameConfirmedFinal['New Cases'].tolist()
print(aft)
af=[]
for i in range(10):
  af.append(aft[i])
Y_predictConfirmedES = ExponentialSmoothingMethod(af)
rSquaredScoreES = RSquaredScore(Y_testConfirmed, Y_predictConfirmedES)
adjustedRSquaredScoreES = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedES, X_testConfirmed)
meanAbsoluteErrorES = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedES)
meanSquareErrorES = MeanSquareError(Y_testConfirmed, Y_predictConfirmedES)
rootMeanSquareErrorES = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedES)

evaluationMethods = ['Model', 'R Square', 'R Square Adjusted', 'MSE', 'MAE', 'RMSE']
models = ['LR', 'Lasso', 'SVM', 'ES']
table = PrettyTable()
table.field_names = evaluationMethods
table.title = "Model Performance on New Confirmed Cases Using Architecture 3"
table.add_row([models[0], rSquaredScoreLR, adjustedRSquaredScoreLR, meanSquareErrorLR, meanAbsoluteErrorLR, rootMeanSquareErrorLR])
table.add_row([models[1], rSquaredScoreLasso, adjustedRSquaredScoreLasso, meanSquareErrorLasso, meanAbsoluteErrorLasso, rootMeanSquareErrorLasso])
table.add_row([models[2], rSquaredScoreSVM, adjustedRSquaredScoreSVM, meanSquareErrorSVM, meanAbsoluteErrorSVM, rootMeanSquareErrorSVM])
table.add_row([models[3], rSquaredScoreES, adjustedRSquaredScoreES, meanSquareErrorES, meanAbsoluteErrorES, rootMeanSquareErrorES])
print(table)

"""##### 2. Death Cases Data - Architecture 3"""

#@title
X_trainDeaths, Y_trainDeaths, X_testDeaths, Y_testDeaths = trainTestSplit(dataFrameDeathsFinal, 56, 10)

#Linear Regression
Y_predictDeathsLR = LinearRegressionMethod(X_trainDeaths, Y_trainDeaths, X_testDeaths)

rSquaredScoreLR = RSquaredScore(Y_testDeaths, Y_predictDeathsLR)
adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testDeaths, Y_predictDeathsLR, X_testDeaths)
meanAbsoluteErrorLR = MeanAbsoluteError(Y_testDeaths, Y_predictDeathsLR)
meanSquareErrorLR = MeanSquareError(Y_testDeaths, Y_predictDeathsLR)
rootMeanSquareErrorLR = RootMeanSquareError(Y_testDeaths, Y_predictDeathsLR)
graphforfutureprediction(dataFrameDeathsFinal,56)
#SVM
Y_predictDeathsSVM = SVMMethod(X_trainDeaths, Y_trainDeaths, X_testDeaths)
rSquaredScoreSVM = RSquaredScore(Y_testDeaths, Y_predictDeathsSVM)
adjustedRSquaredScoreSVM = AdjustedRSquaredScore(Y_testDeaths, Y_predictDeathsSVM, X_testDeaths)
meanAbsoluteErrorSVM = MeanAbsoluteError(Y_testDeaths, Y_predictDeathsSVM)
meanSquareErrorSVM = MeanSquareError(Y_testDeaths, Y_predictDeathsSVM)
rootMeanSquareErrorSVM = RootMeanSquareError(Y_testDeaths, Y_predictDeathsSVM)
graphforfutureprediction1(dataFrameDeathsFinal,56)
#Lasso Regression
Y_predictDeathsLasso = LassoMethod(X_trainDeaths, Y_trainDeaths, X_testDeaths)
rSquaredScoreLasso = RSquaredScore(Y_testDeaths, Y_predictDeathsLasso)
adjustedRSquaredScoreLasso = AdjustedRSquaredScore(Y_testDeaths, Y_predictDeathsLasso, X_testDeaths)
meanAbsoluteErrorLasso = MeanAbsoluteError(Y_testDeaths, Y_predictDeathsLasso)
meanSquareErrorLasso = MeanSquareError(Y_testDeaths, Y_predictDeathsLasso)
rootMeanSquareErrorLasso = RootMeanSquareError(Y_testDeaths, Y_predictDeathsLasso)
graphforfutureprediction2(dataFrameDeathsFinal,56)

#Exponential Smoothing - TODO
aft=dataFrameDeathsFinal['Deaths'].tolist()
print(aft)
af=[]
for i in range(10):
  af.append(aft[i])
Y_predictConfirmedES = ExponentialSmoothingMethod(af)
rSquaredScoreES = RSquaredScore(Y_testConfirmed, Y_predictConfirmedES)
adjustedRSquaredScoreES = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedES, X_testConfirmed)
meanAbsoluteErrorES = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedES)
meanSquareErrorES = MeanSquareError(Y_testConfirmed, Y_predictConfirmedES)
rootMeanSquareErrorES = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedES)

evaluationMethods = ['Model', 'R Square', 'R Square Adjusted', 'MSE', 'MAE', 'RMSE']
models = ['LR', 'Lasso', 'SVM', 'ES']
table = PrettyTable()
table.field_names = evaluationMethods
table.title = "Model Performance on Death Cases Using Architecture 3"
table.add_row([models[0], rSquaredScoreLR, adjustedRSquaredScoreLR, meanSquareErrorLR, meanAbsoluteErrorLR, rootMeanSquareErrorLR])
table.add_row([models[1], rSquaredScoreLasso, adjustedRSquaredScoreLasso, meanSquareErrorLasso, meanAbsoluteErrorLasso, rootMeanSquareErrorLasso])
table.add_row([models[2], rSquaredScoreSVM, adjustedRSquaredScoreSVM, meanSquareErrorSVM, meanAbsoluteErrorSVM, rootMeanSquareErrorSVM])
table.add_row([models[3], rSquaredScoreES, adjustedRSquaredScoreES, meanSquareErrorES, meanAbsoluteErrorES, rootMeanSquareErrorES])
print(table)

"""##### 3. Recovered Cases Data - Architecture 3"""

#@title
X_trainRecovered, Y_trainRecovered, X_testRecovered, Y_testRecovered = trainTestSplit(dataFrameRecoveredFinal, 56, 10)

#Linear Regression
Y_predictRecoveredLR = LinearRegressionMethod(X_trainRecovered, Y_trainRecovered, X_testRecovered)

rSquaredScoreLR = RSquaredScore(Y_testRecovered, Y_predictRecoveredLR)
adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testRecovered, Y_predictRecoveredLR, X_testRecovered)
meanAbsoluteErrorLR = MeanAbsoluteError(Y_testRecovered, Y_predictRecoveredLR)
meanSquareErrorLR = MeanSquareError(Y_testRecovered, Y_predictRecoveredLR)
rootMeanSquareErrorLR = RootMeanSquareError(Y_testRecovered, Y_predictRecoveredLR)
graphforfutureprediction(dataFrameRecoveredFinal,56)
#SVM
Y_predictRecoveredSVM = SVMMethod(X_trainRecovered, Y_trainRecovered, X_testRecovered)
rSquaredScoreSVM = RSquaredScore(Y_testRecovered, Y_predictRecoveredSVM)
adjustedRSquaredScoreSVM = AdjustedRSquaredScore(Y_testRecovered, Y_predictRecoveredSVM, X_testRecovered)
meanAbsoluteErrorSVM = MeanAbsoluteError(Y_testRecovered, Y_predictRecoveredSVM)
meanSquareErrorSVM = MeanSquareError(Y_testRecovered, Y_predictRecoveredSVM)
rootMeanSquareErrorSVM = RootMeanSquareError(Y_testRecovered, Y_predictRecoveredSVM)
graphforfutureprediction1(dataFrameRecoveredFinal,56)
#Lasso Regression
Y_predictRecoveredLasso = LassoMethod(X_trainRecovered, Y_trainRecovered, X_testRecovered)
rSquaredScoreLasso = RSquaredScore(Y_testRecovered, Y_predictRecoveredLasso)
adjustedRSquaredScoreLasso = AdjustedRSquaredScore(Y_testRecovered, Y_predictRecoveredLasso, X_testRecovered)
meanAbsoluteErrorLasso = MeanAbsoluteError(Y_testRecovered, Y_predictRecoveredLasso)
meanSquareErrorLasso = MeanSquareError(Y_testRecovered, Y_predictRecoveredLasso)
rootMeanSquareErrorLasso = RootMeanSquareError(Y_testRecovered, Y_predictRecoveredLasso)
graphforfutureprediction2(dataFrameRecoveredFinal,56)

#Exponential Smoothing - TODO
aft=dataFrameRecoveredFinal['Recoveries'].tolist()
print(aft)
af=[]
for i in range(10):
  af.append(aft[i])
Y_predictConfirmedES = ExponentialSmoothingMethod(af)
rSquaredScoreES = RSquaredScore(Y_testConfirmed, Y_predictConfirmedES)
adjustedRSquaredScoreES = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedES, X_testConfirmed)
meanAbsoluteErrorES = MeanAbsoluteError(Y_testConfirmed, Y_predictConfirmedES)
meanSquareErrorES = MeanSquareError(Y_testConfirmed, Y_predictConfirmedES)
rootMeanSquareErrorES = RootMeanSquareError(Y_testConfirmed, Y_predictConfirmedES)

evaluationMethods = ['Model', 'R Square', 'R Square Adjusted', 'MSE', 'MAE', 'RMSE']
models = ['LR', 'Lasso', 'SVM', 'ES']
table = PrettyTable()
table.field_names = evaluationMethods
table.title = "Model Performance on Recovered Cases Using Architecture 3"
table.add_row([models[0], rSquaredScoreLR, adjustedRSquaredScoreLR, meanSquareErrorLR, meanAbsoluteErrorLR, rootMeanSquareErrorLR])
table.add_row([models[1], rSquaredScoreLasso, adjustedRSquaredScoreLasso, meanSquareErrorLasso, meanAbsoluteErrorLasso, rootMeanSquareErrorLasso])
table.add_row([models[2], rSquaredScoreSVM, adjustedRSquaredScoreSVM, meanSquareErrorSVM, meanAbsoluteErrorSVM, rootMeanSquareErrorSVM])
table.add_row([models[3], rSquaredScoreES, adjustedRSquaredScoreES, meanSquareErrorES, meanAbsoluteErrorES, rootMeanSquareErrorES])
print(table)

"""### **Remaining Work Under Progress**"""

# from statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt
# %matplotlib inline

# #data = [446.6565,  454.4733,  455.663 ,  423.6322,  456.2713,  440.5881, 425.3325,  485.1494,  506.0482,  526.792 ,  514.2689,  494.211 ]
# #index= pd.date_range(start='1996', end='2008', freq='A')
# dayio=[]

# oildata = pd.Series(arr_date, dpq)
# #print(len(index))
# fit1 = SimpleExpSmoothing(oildata).fit(smoothing_level=0.2,optimized=False)
# gat=fit1.predict(len(dpq),len(dpq))
# fcast1 = fit1.forecast(3).rename(r'$\alpha=0.2$')
# print(fcast1)
# plt.figure(figsize=(12, 8))
# plt.plot(gat, marker='o', color='black')
# plt.plot(fit1.fittedvalues, marker='o', color='blue')

"""**##################################################################**

**Alternative approach:**

**Arch1: Confirmed cases**
"""

## Lasso Model
X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 26, 10)
lassoModel = Lasso(alpha=1.0)
lassoModel.fit(X_trainConfirmed,Y_trainConfirmed)
Y_predict = lassoModel.predict(X_testConfirmed)
print('LASSO  R2 Score   : ',RSquaredScore(Y_trainConfirmed, lassoModel.predict(X_trainConfirmed)))
rSquaredScore = RSquaredScore(Y_trainConfirmed, lassoModel.predict(X_trainConfirmed))
n = len(X_trainConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testConfirmed, lassoModel.predict(X_testConfirmed))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, lassoModel.predict(X_testConfirmed), squared = False)
print("RMSE:",rootMeanSquareError)

## Linear Regression:
X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 26, 10)
ln_model = LinearRegression()
ln_model.fit(X_trainConfirmed, Y_trainConfirmed)
print('Linear Regression  R2 Score   : ',RSquaredScore(Y_trainConfirmed, ln_model.predict(X_trainConfirmed)))
rSquaredScore = RSquaredScore(Y_trainConfirmed, ln_model.predict(X_trainConfirmed))
n = len(X_trainConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testConfirmed, ln_model.predict(X_testConfirmed))
print("MAE",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, ln_model.predict(X_testConfirmed), squared = False)
print("RMSE",rootMeanSquareError)

## SVM 
X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 26, 10)
svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.2)
svmModel.fit(X_trainConfirmed, Y_trainConfirmed.ravel())
Y_predict = svmModel.predict(X_testConfirmed)
print('SVM  R2 Score   : ',RSquaredScore(Y_trainConfirmed, svmModel.predict(X_trainConfirmed)))
#adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
#def AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed):
rSquaredScore = RSquaredScore(Y_trainConfirmed, svmModel.predict(X_trainConfirmed))
n = len(X_trainConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testConfirmed, svmModel.predict(X_testConfirmed))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, svmModel.predict(X_testConfirmed), squared = False)
print("RMSE:",rootMeanSquareError)

## Exponential Smoothing

"""**Death Cases:**"""

## Lasso Model
X_trainDeath, Y_trainDeath, X_testDeath, Y_testDeath = trainTestSplit(dataFrameDeathsFinal, 26, 10)
lassoModel = Lasso(alpha=1.0)
lassoModel.fit(X_trainDeath, Y_trainDeath)
Y_predict = lassoModel.predict(X_testDeath)
print('LASSO  R2 Score   : ',RSquaredScore(Y_trainDeath, lassoModel.predict(X_trainDeath)))
rSquaredScore = RSquaredScore(Y_trainDeath, lassoModel.predict(X_trainDeath))
n = len(X_trainDeath)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testDeath, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testDeath, lassoModel.predict(X_testDeath))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testDeath, lassoModel.predict(X_testDeath), squared = False)
print("RMSE:",rootMeanSquareError)

## Linear Regression:
X_trainDeath, Y_trainDeath, X_testDeath, Y_testDeath= trainTestSplit(dataFrameDeathsFinal, 26, 10)
ln_model = LinearRegression()
ln_model.fit(X_trainDeath, Y_trainDeath)
print('Linear Regression  R2 Score   : ',RSquaredScore(Y_trainDeath, ln_model.predict(X_trainDeath)))
rSquaredScore = RSquaredScore(Y_trainDeath, ln_model.predict(X_trainDeath))
n = len(X_trainDeath)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testDeath, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testDeath, ln_model.predict(X_testDeath))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testDeath, ln_model.predict(X_testDeath), squared = False)
print("RMSE:",rootMeanSquareError)

## SVM 
X_trainDeath, Y_trainDeath, X_testDeath, Y_testDeath = trainTestSplit(dataFrameDeathsFinal, 26, 10)
svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.2)
svmModel.fit(X_trainDeath, Y_trainDeath.ravel())
Y_predict = svmModel.predict(X_testDeath)
print('SVM  R2 Score   : ',RSquaredScore(Y_trainDeath, svmModel.predict(X_trainDeath)))
#adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
#def AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed):
rSquaredScore = RSquaredScore(Y_trainDeath, svmModel.predict(X_trainDeath))
n = len(X_trainDeath)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testDeath, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testDeath, svmModel.predict(X_testDeath))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testDeath, svmModel.predict(X_testDeath), squared = False)
print("RMSE:",rootMeanSquareError)

## Exponential Smoothing

"""**Recovered Cases:**"""

## Lasso Model
X_trainRec, Y_trainRec, X_testRec, Y_testRec = trainTestSplit(dataFrameRecoveredFinal, 26, 10)
lassoModel = Lasso(alpha=1.0)
lassoModel.fit(X_trainRec, Y_trainRec)
Y_predict = lassoModel.predict(X_testRec)
print('LASSO  R2 Score   : ',RSquaredScore(Y_trainRec, lassoModel.predict(X_trainRec)))
rSquaredScore = RSquaredScore(Y_trainRec, lassoModel.predict(X_trainRec))
n = len(X_trainRec)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testRec, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testRec, lassoModel.predict(X_testRec))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testRec, lassoModel.predict(X_testRec), squared = False)
print("RMSE:",rootMeanSquareError)

## Linear Regression:
X_trainRec, Y_trainRec, X_testRec, Y_testRec= trainTestSplit(dataFrameRecoveredFinal, 26, 10)
ln_model = LinearRegression()
ln_model.fit(X_trainRec, Y_trainRec)
print('Linear Regression  R2 Score   : ',RSquaredScore(Y_trainRec, ln_model.predict(X_trainRec)))
rSquaredScore = RSquaredScore(Y_trainRec, ln_model.predict(X_trainRec))
n = len(X_trainRec)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testRec, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testRec, ln_model.predict(X_testRec))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testRec, ln_model.predict(X_testRec), squared = False)
print("RMSE:",rootMeanSquareError)

## SVM 
X_trainRec, Y_trainRec, X_testRec, Y_testRec = trainTestSplit(dataFrameRecoveredFinal, 26, 10)
svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.2)
svmModel.fit(X_trainRec, Y_trainRec.ravel())
Y_predict = svmModel.predict(X_testRec)
print('SVM  R2 Score   : ',RSquaredScore(Y_trainRec, svmModel.predict(X_trainRec)))
#adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
#def AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed):
rSquaredScore = RSquaredScore(Y_trainRec, svmModel.predict(X_trainRec))
n = len(X_trainRec)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testRec, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testRec, svmModel.predict(X_testRec))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testRec, svmModel.predict(X_testRec), squared = False)
print("RMSE:",rootMeanSquareError)

"""**Arch2: Confirmed cases**


"""

## Lasso Model
X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 41, 10)
lassoModel = Lasso(alpha=1.0)
lassoModel.fit(X_trainConfirmed,Y_trainConfirmed)
Y_predict = lassoModel.predict(X_testConfirmed)
print('LASSO  R2 Score : ',RSquaredScore(Y_trainConfirmed, lassoModel.predict(X_trainConfirmed)))
rSquaredScore = RSquaredScore(Y_trainConfirmed, lassoModel.predict(X_trainConfirmed))
n = len(X_trainConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testConfirmed, lassoModel.predict(X_testConfirmed))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, lassoModel.predict(X_testConfirmed), squared = False)
print("RMSE:",rootMeanSquareError)

## Linear Regression:
X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 41, 10)
ln_model = LinearRegression()
ln_model.fit(X_trainConfirmed, Y_trainConfirmed)
print('Linear Regression  R2 Score   : ',RSquaredScore(Y_trainConfirmed, ln_model.predict(X_trainConfirmed)))
rSquaredScore = RSquaredScore(Y_trainConfirmed, ln_model.predict(X_trainConfirmed))
n = len(X_trainConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testConfirmed, ln_model.predict(X_testConfirmed))
print("MAE",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, ln_model.predict(X_testConfirmed), squared = False)
print("RMSE",rootMeanSquareError)

## SVM 
X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 41, 10)
svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.2)
svmModel.fit(X_trainConfirmed, Y_trainConfirmed.ravel())
Y_predict = svmModel.predict(X_testConfirmed)
print('SVM  R2 Score   : ',RSquaredScore(Y_trainConfirmed, svmModel.predict(X_trainConfirmed)))
#adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
#def AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed):
rSquaredScore = RSquaredScore(Y_trainConfirmed, svmModel.predict(X_trainConfirmed))
n = len(X_trainConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testConfirmed, svmModel.predict(X_testConfirmed))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, svmModel.predict(X_testConfirmed), squared = False)
print("RMSE:",rootMeanSquareError)

"""**Death Cases:**"""

## Lasso Model
X_trainDeath, Y_trainDeath, X_testDeath, Y_testDeath = trainTestSplit(dataFrameDeathsFinal, 41, 10)
lassoModel = Lasso(alpha=1.0)
lassoModel.fit(X_trainDeath, Y_trainDeath)
Y_predict = lassoModel.predict(X_testDeath)
print('LASSO  R2 Score   : ',RSquaredScore(Y_trainDeath, lassoModel.predict(X_trainDeath)))
rSquaredScore = RSquaredScore(Y_trainDeath, lassoModel.predict(X_trainDeath))
n = len(X_trainDeath)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted squared",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testDeath, Y_predict)
print("mean squared value",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testDeath, lassoModel.predict(X_testDeath))
print("Mean absolute error",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testDeath, lassoModel.predict(X_testDeath), squared = False)
print("Root mean square error",rootMeanSquareError)

## Linear Regression:
X_trainDeath, Y_trainDeath, X_testDeath, Y_testDeath= trainTestSplit(dataFrameDeathsFinal, 41, 10)
ln_model = LinearRegression()
ln_model.fit(X_trainDeath, Y_trainDeath)
print('Linear Regression  R2 Score   : ',RSquaredScore(Y_trainDeath, ln_model.predict(X_trainDeath)))
rSquaredScore = RSquaredScore(Y_trainDeath, ln_model.predict(X_trainDeath))
n = len(X_trainDeath)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testDeath, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testDeath, ln_model.predict(X_testDeath))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testDeath, ln_model.predict(X_testDeath), squared = False)
print("RMSE:",rootMeanSquareError)

## SVM 
X_trainDeath, Y_trainDeath, X_testDeath, Y_testDeath = trainTestSplit(dataFrameDeathsFinal, 41, 10)
svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.2)
svmModel.fit(X_trainDeath, Y_trainDeath.ravel())
Y_predict = svmModel.predict(X_testDeath)
print('SVM  R2 Score   : ',RSquaredScore(Y_trainDeath, svmModel.predict(X_trainDeath)))
#adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
#def AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed):
rSquaredScore = RSquaredScore(Y_trainDeath, svmModel.predict(X_trainDeath))
n = len(X_trainDeath)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testDeath, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testDeath, svmModel.predict(X_testDeath))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testDeath, svmModel.predict(X_testDeath), squared = False)
print("RMSE:",rootMeanSquareError)

"""**Recovered Cases:**"""

## Lasso Model
X_trainRec, Y_trainRec, X_testRec, Y_testRec = trainTestSplit(dataFrameRecoveredFinal, 41, 10)
lassoModel = Lasso(alpha=1.0)
lassoModel.fit(X_trainRec, Y_trainRec)
Y_predict = lassoModel.predict(X_testRec)
print('LASSO  R2 Score   : ',RSquaredScore(Y_trainRec, lassoModel.predict(X_trainRec)))
rSquaredScore = RSquaredScore(Y_trainRec, lassoModel.predict(X_trainRec))
n = len(X_trainRec)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted squared",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testRec, Y_predict)
print("mean squared value",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testRec, lassoModel.predict(X_testRec))
print("Mean absolute error",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testRec, lassoModel.predict(X_testRec), squared = False)
print("Root mean square error",rootMeanSquareError)

## Linear Regression:
X_trainRec, Y_trainRec, X_testRec, Y_testRec= trainTestSplit(dataFrameRecoveredFinal, 41, 10)
ln_model = LinearRegression()
ln_model.fit(X_trainRec, Y_trainRec)
print('Linear Regression  R2 Score   : ',RSquaredScore(Y_trainRec, ln_model.predict(X_trainRec)))
rSquaredScore = RSquaredScore(Y_trainRec, ln_model.predict(X_trainRec))
n = len(X_trainRec)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testRec, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testRec, ln_model.predict(X_testRec))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testRec, ln_model.predict(X_testRec), squared = False)
print("RMSE:",rootMeanSquareError)

## SVM 
X_trainRec, Y_trainRec, X_testRec, Y_testRec = trainTestSplit(dataFrameRecoveredFinal, 41, 10)
svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.2)
svmModel.fit(X_trainRec, Y_trainRec.ravel())
Y_predict = svmModel.predict(X_testRec)
print('SVM  R2 Score   : ',RSquaredScore(Y_trainRec, svmModel.predict(X_trainRec)))
#adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
#def AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed):
rSquaredScore = RSquaredScore(Y_trainRec, svmModel.predict(X_trainRec))
n = len(X_trainRec)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testRec, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testRec, svmModel.predict(X_testRec))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testRec, svmModel.predict(X_testRec), squared = False)
print("RMSE:",rootMeanSquareError)

"""**Arch 3: 
Confirmed Cases** 
"""

## Lasso Model
X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 56, 10)
lassoModel = Lasso(alpha=1.0)
lassoModel.fit(X_trainConfirmed,Y_trainConfirmed)
Y_predict = lassoModel.predict(X_testConfirmed)
print('LASSO  R2 Score : ',RSquaredScore(Y_trainConfirmed, lassoModel.predict(X_trainConfirmed)))
rSquaredScore = RSquaredScore(Y_trainConfirmed, lassoModel.predict(X_trainConfirmed))
n = len(X_trainConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testConfirmed, lassoModel.predict(X_testConfirmed))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, lassoModel.predict(X_testConfirmed), squared = False)
print("RMSE:",rootMeanSquareError)

## Linear Regression:
X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 56, 10)
ln_model = LinearRegression()
ln_model.fit(X_trainConfirmed, Y_trainConfirmed)
print('Linear Regression  R2 Score   : ',RSquaredScore(Y_trainConfirmed, ln_model.predict(X_trainConfirmed)))
rSquaredScore = RSquaredScore(Y_trainConfirmed, ln_model.predict(X_trainConfirmed))
n = len(X_trainConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testConfirmed, ln_model.predict(X_testConfirmed))
print("MAE",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, ln_model.predict(X_testConfirmed), squared = False)
print("RMSE",rootMeanSquareError)

## SVM 
X_trainConfirmed, Y_trainConfirmed, X_testConfirmed, Y_testConfirmed = trainTestSplit(dataFrameConfirmedFinal, 56, 10)
svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.2)
svmModel.fit(X_trainConfirmed, Y_trainConfirmed.ravel())
Y_predict = svmModel.predict(X_testConfirmed)
print('SVM  R2 Score   : ',RSquaredScore(Y_trainConfirmed, svmModel.predict(X_trainConfirmed)))
#adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
#def AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed):
rSquaredScore = RSquaredScore(Y_trainConfirmed, svmModel.predict(X_trainConfirmed))
n = len(X_trainConfirmed)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testConfirmed, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testConfirmed, svmModel.predict(X_testConfirmed))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testConfirmed, svmModel.predict(X_testConfirmed), squared = False)
print("RMSE:",rootMeanSquareError)

"""**Death Cases:**"""

## Lasso Model
X_trainDeath, Y_trainDeath, X_testDeath, Y_testDeath = trainTestSplit(dataFrameDeathsFinal, 56, 10)
lassoModel = Lasso(alpha=1.0)
lassoModel.fit(X_trainDeath, Y_trainDeath)
Y_predict = lassoModel.predict(X_testDeath)
print('LASSO  R2 Score   : ',RSquaredScore(Y_trainDeath, lassoModel.predict(X_trainDeath)))
rSquaredScore = RSquaredScore(Y_trainDeath, lassoModel.predict(X_trainDeath))
n = len(X_trainDeath)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted squared",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testDeath, Y_predict)
print("mean squared value",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testDeath, lassoModel.predict(X_testDeath))
print("Mean absolute error",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testDeath, lassoModel.predict(X_testDeath), squared = False)
print("Root mean square error",rootMeanSquareError)

## Linear Regression:
X_trainDeath, Y_trainDeath, X_testDeath, Y_testDeath= trainTestSplit(dataFrameDeathsFinal, 56, 10)
ln_model = LinearRegression()
ln_model.fit(X_trainDeath, Y_trainDeath)
print('Linear Regression  R2 Score   : ',RSquaredScore(Y_trainDeath, ln_model.predict(X_trainDeath)))
rSquaredScore = RSquaredScore(Y_trainDeath, ln_model.predict(X_trainDeath))
n = len(X_trainDeath)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testDeath, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testDeath, ln_model.predict(X_testDeath))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testDeath, ln_model.predict(X_testDeath), squared = False)
print("RMSE:",rootMeanSquareError)

## SVM 
X_trainDeath, Y_trainDeath, X_testDeath, Y_testDeath = trainTestSplit(dataFrameDeathsFinal, 56, 10)
svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.2)
svmModel.fit(X_trainDeath, Y_trainDeath.ravel())
Y_predict = svmModel.predict(X_testDeath)
print('SVM  R2 Score   : ',RSquaredScore(Y_trainDeath, svmModel.predict(X_trainDeath)))
#adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
#def AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed):
rSquaredScore = RSquaredScore(Y_trainDeath, svmModel.predict(X_trainDeath))
n = len(X_trainDeath)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testDeath, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testDeath, svmModel.predict(X_testDeath))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testDeath, svmModel.predict(X_testDeath), squared = False)
print("RMSE:",rootMeanSquareError)

"""**Recovered Cases:**"""

## Lasso Model
X_trainRec, Y_trainRec, X_testRec, Y_testRec = trainTestSplit(dataFrameRecoveredFinal, 56, 10)
lassoModel = Lasso(alpha=1.0)
lassoModel.fit(X_trainRec, Y_trainRec)
Y_predict = lassoModel.predict(X_testRec)
print('LASSO  R2 Score   : ',RSquaredScore(Y_trainRec, lassoModel.predict(X_trainRec)))
rSquaredScore = RSquaredScore(Y_trainRec, lassoModel.predict(X_trainRec))
n = len(X_trainRec)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted squared",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testRec, Y_predict)
print("mean squared value",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testRec, lassoModel.predict(X_testRec))
print("Mean absolute error",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testRec, lassoModel.predict(X_testRec), squared = False)
print("Root mean square error",rootMeanSquareError)

## Linear Regression:
X_trainRec, Y_trainRec, X_testRec, Y_testRec= trainTestSplit(dataFrameRecoveredFinal, 56, 10)
ln_model = LinearRegression()
ln_model.fit(X_trainRec, Y_trainRec)
print('Linear Regression  R2 Score   : ',RSquaredScore(Y_trainRec, ln_model.predict(X_trainRec)))
rSquaredScore = RSquaredScore(Y_trainRec, ln_model.predict(X_trainRec))
n = len(X_trainRec)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testRec, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testRec, ln_model.predict(X_testRec))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testRec, ln_model.predict(X_testRec), squared = False)
print("RMSE:",rootMeanSquareError)

## SVM 
X_trainRec, Y_trainRec, X_testRec, Y_testRec = trainTestSplit(dataFrameRecoveredFinal, 56, 10)
svmModel = SVR(shrinking = True, kernel = 'poly',gamma = 0.01, epsilon = 1, degree = 4, C = 0.2)
svmModel.fit(X_trainRec, Y_trainRec.ravel())
Y_predict = svmModel.predict(X_testRec)
print('SVM  R2 Score   : ',RSquaredScore(Y_trainRec, svmModel.predict(X_trainRec)))
#adjustedRSquaredScoreLR = AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed)
#def AdjustedRSquaredScore(Y_testConfirmed, Y_predictConfirmedLR, X_testConfirmed):
rSquaredScore = RSquaredScore(Y_trainRec, svmModel.predict(X_trainRec))
n = len(X_trainRec)
p = 1
adjustedRSquaredScore = (1 - (1 - rSquaredScore)) * ((n - 1) / (n - p -1))
print("Adjusted R2 score:",adjustedRSquaredScore)
meanSquareError = mean_squared_error(Y_testRec, Y_predict)
print("MSE:",meanSquareError)
meanAbsoluteError = mean_absolute_error(Y_testRec, svmModel.predict(X_testRec))
print("MAE:",meanAbsoluteError)
rootMeanSquareError = mean_squared_error(Y_testRec, svmModel.predict(X_testRec), squared = False)
print("RMSE:",rootMeanSquareError)









